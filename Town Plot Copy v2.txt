local MaxPartsPerSecond = 12

local LocalPlayer = game.Players.LocalPlayer
local SecretSpotTopSecret = Vector3.new(582, 4, -909)
local BuildingAreas = workspace["Private Building Areas"]
local UserInputService = game:GetService("UserInputService")
local ChatBar = LocalPlayer.PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar
local Building = false

local PlotCache = {}

local Options = {}
Options.Autosave = false
Options.ObscurePlot = false
Options.MakePlotOnEdge = false

local function ButtonConnect(Button,OptionName)
    Button.MouseButton1Click:Connect(function()
        if Button.Text == "OFF" then
            Button.Text = "ON"
            Button.BackgroundColor3 = Color3.new(0, 1, 0.133333)
            Options[OptionName] = true
        else
            Button.Text = "OFF"
            Button.BackgroundColor3 = Color3.new(1, 0, 0)
            Options[OptionName] = false
        end
    end)
end

local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/Jxereas/UI-Libraries/main/notification_gui_library.lua", true))()

-- Gui to Lua
-- Version: 3.2

-- Instances:

local Main = Instance.new("ScreenGui")
local EnclosingContainer = Instance.new("Frame")
local Frame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local OptionsSection = Instance.new("Frame")
local UICorner_2 = Instance.new("UICorner")
local TextLabel = Instance.new("TextLabel")
local TextLabel_2 = Instance.new("TextLabel")
local HidePlot = Instance.new("TextButton")
local UICorner_3 = Instance.new("UICorner")
local UseMapEdge = Instance.new("TextButton")
local UICorner_4 = Instance.new("UICorner")
local TextLabel_3 = Instance.new("TextLabel")
local Autosave = Instance.new("TextButton")
local UICorner_5 = Instance.new("UICorner")
local TextLabel_4 = Instance.new("TextLabel")
local TextLabel_5 = Instance.new("TextLabel")
local UICorner_6 = Instance.new("UICorner")
local MainSection = Instance.new("Frame")
local UICorner_7 = Instance.new("UICorner")
local Filename = Instance.new("TextBox")
local LoadFile = Instance.new("TextButton")
local UICorner_8 = Instance.new("UICorner")
local SaveFile = Instance.new("TextButton")
local UICorner_9 = Instance.new("UICorner")
local SelectPlot = Instance.new("TextButton")
local UICorner_10 = Instance.new("UICorner")
local TextLabel_6 = Instance.new("TextLabel")
local TextLabel_7 = Instance.new("TextLabel")
local UICorner_11 = Instance.new("UICorner")

--Properties:

Main.Name = "Main"
Main.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
Main.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

EnclosingContainer.Name = "EnclosingContainer"
EnclosingContainer.Parent = Main
EnclosingContainer.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
EnclosingContainer.BorderSizePixel = 0
EnclosingContainer.ClipsDescendants = true
EnclosingContainer.Position = UDim2.new(0.354066998, 0, 0.363440871, 0)
EnclosingContainer.Size = UDim2.new(0, 367, 0, 254)

Frame.Parent = EnclosingContainer
Frame.BackgroundColor3 = Color3.fromRGB(20, 18, 22)
Frame.BorderColor3 = Color3.fromRGB(83, 129, 162)
Frame.BorderSizePixel = 0
Frame.ClipsDescendants = true
Frame.Position = UDim2.new(0.5, -183, 0.622047246, -127)
Frame.Size = UDim2.new(0, 367, 0, 223)

UICorner.Parent = Frame

OptionsSection.Name = "OptionsSection"
OptionsSection.Parent = Frame
OptionsSection.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
OptionsSection.BorderSizePixel = 0
OptionsSection.ClipsDescendants = true
OptionsSection.Size = UDim2.new(0, 182, 0, 223)

UICorner_2.Parent = OptionsSection

TextLabel.Parent = OptionsSection
TextLabel.BackgroundColor3 = Color3.fromRGB(53, 53, 53)
TextLabel.BackgroundTransparency = 0.800
TextLabel.BorderSizePixel = 0
TextLabel.Position = UDim2.new(-0.00274725282, 0, 0, 0)
TextLabel.Size = UDim2.new(0, 182, 0, 21)
TextLabel.Font = Enum.Font.Gotham
TextLabel.Text = "Options"
TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextSize = 14.000

TextLabel_2.Parent = OptionsSection
TextLabel_2.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
TextLabel_2.BorderSizePixel = 0
TextLabel_2.Position = UDim2.new(-0.00274725282, 0, 0.0941704065, 0)
TextLabel_2.Size = UDim2.new(0, 126, 0, 30)
TextLabel_2.Font = Enum.Font.Gotham
TextLabel_2.Text = "Obscure Plot"
TextLabel_2.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_2.TextScaled = true
TextLabel_2.TextSize = 14.000
TextLabel_2.TextWrapped = true

HidePlot.Name = "HidePlot"
HidePlot.Parent = OptionsSection
HidePlot.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
HidePlot.Position = UDim2.new(0.689560413, 0, 0.0941704065, 0)
HidePlot.Size = UDim2.new(0, 56, 0, 30)
HidePlot.Font = Enum.Font.Gotham
HidePlot.Text = "OFF"
HidePlot.TextColor3 = Color3.fromRGB(0, 0, 0)
HidePlot.TextSize = 14.000

UICorner_3.CornerRadius = UDim.new(0, 10)
UICorner_3.Parent = HidePlot

UseMapEdge.Name = "UseMapEdge"
UseMapEdge.Parent = OptionsSection
UseMapEdge.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
UseMapEdge.Position = UDim2.new(0.689560413, 0, 0.260089695, 0)
UseMapEdge.Size = UDim2.new(0, 56, 0, 30)
UseMapEdge.Font = Enum.Font.Gotham
UseMapEdge.Text = "OFF"
UseMapEdge.TextColor3 = Color3.fromRGB(0, 0, 0)
UseMapEdge.TextSize = 14.000

UICorner_4.CornerRadius = UDim.new(0, 10)
UICorner_4.Parent = UseMapEdge

TextLabel_3.Parent = OptionsSection
TextLabel_3.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
TextLabel_3.BorderSizePixel = 0
TextLabel_3.Position = UDim2.new(-0.00274725282, 0, 0.260089695, 0)
TextLabel_3.Size = UDim2.new(0, 126, 0, 30)
TextLabel_3.Font = Enum.Font.Gotham
TextLabel_3.Text = "Make plot on map edge"
TextLabel_3.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_3.TextScaled = true
TextLabel_3.TextSize = 14.000
TextLabel_3.TextWrapped = true

Autosave.Name = "Autosave"
Autosave.Parent = OptionsSection
Autosave.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
Autosave.Position = UDim2.new(0.689560413, 0, 0.430493295, 0)
Autosave.Size = UDim2.new(0, 56, 0, 30)
Autosave.Font = Enum.Font.Gotham
Autosave.Text = "OFF"
Autosave.TextColor3 = Color3.fromRGB(0, 0, 0)
Autosave.TextSize = 14.000

UICorner_5.CornerRadius = UDim.new(0, 10)
UICorner_5.Parent = Autosave

TextLabel_4.Parent = OptionsSection
TextLabel_4.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
TextLabel_4.BorderSizePixel = 0
TextLabel_4.Position = UDim2.new(-0.00274725282, 0, 0.430493295, 0)
TextLabel_4.Size = UDim2.new(0, 126, 0, 30)
TextLabel_4.Font = Enum.Font.Gotham
TextLabel_4.Text = "Autosave"
TextLabel_4.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_4.TextScaled = true
TextLabel_4.TextSize = 14.000
TextLabel_4.TextWrapped = true

TextLabel_5.Parent = OptionsSection
TextLabel_5.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_5.BackgroundTransparency = 0.900
TextLabel_5.Position = UDim2.new(-0.00549450563, 0, 0.600896835, 0)
TextLabel_5.Size = UDim2.new(0, 181, 0, 89)
TextLabel_5.Font = Enum.Font.Gotham
TextLabel_5.Text = "Autosave will automatically save your plot to the game every 5 minutes. Obscure Plot will cover your plot with a giant part so others can't see what you're building."
TextLabel_5.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_5.TextScaled = true
TextLabel_5.TextSize = 14.000
TextLabel_5.TextWrapped = true

UICorner_6.Parent = TextLabel_5

MainSection.Name = "MainSection"
MainSection.Parent = Frame
MainSection.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
MainSection.BorderSizePixel = 0
MainSection.ClipsDescendants = true
MainSection.Position = UDim2.new(0.50408721, 0, 0, 0)
MainSection.Size = UDim2.new(0, 182, 0, 223)

UICorner_7.Parent = MainSection

Filename.Name = "Filename"
Filename.Parent = MainSection
Filename.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
Filename.BorderSizePixel = 0
Filename.Position = UDim2.new(0, 0, 0.0941704065, 0)
Filename.Size = UDim2.new(0, 180, 0, 30)
Filename.Font = Enum.Font.Gotham
Filename.PlaceholderText = "Filename"
Filename.Text = ""
Filename.TextColor3 = Color3.fromRGB(255, 255, 255)
Filename.TextSize = 14.000

LoadFile.Name = "LoadFile"
LoadFile.Parent = MainSection
LoadFile.BackgroundColor3 = Color3.fromRGB(34, 35, 21)
LoadFile.BorderSizePixel = 0
LoadFile.Position = UDim2.new(0.450549453, 0, 0.22869955, 0)
LoadFile.Size = UDim2.new(0, 100, 0, 30)
LoadFile.Font = Enum.Font.Gotham
LoadFile.Text = "Load From File"
LoadFile.TextColor3 = Color3.fromRGB(255, 255, 255)
LoadFile.TextSize = 13.000
LoadFile.TextWrapped = true

UICorner_8.CornerRadius = UDim.new(0, 10)
UICorner_8.Parent = LoadFile

SaveFile.Name = "SaveFile"
SaveFile.Parent = MainSection
SaveFile.BackgroundColor3 = Color3.fromRGB(25, 35, 24)
SaveFile.BorderSizePixel = 0
SaveFile.Position = UDim2.new(0, 0, 0.22869955, 0)
SaveFile.Size = UDim2.new(0, 82, 0, 30)
SaveFile.Font = Enum.Font.Gotham
SaveFile.Text = "Save To File"
SaveFile.TextColor3 = Color3.fromRGB(255, 255, 255)
SaveFile.TextSize = 13.000
SaveFile.TextWrapped = true

UICorner_9.CornerRadius = UDim.new(0, 10)
UICorner_9.Parent = SaveFile

SelectPlot.Name = "SelectPlot"
SelectPlot.Parent = MainSection
SelectPlot.BackgroundColor3 = Color3.fromRGB(66, 66, 66)
SelectPlot.Position = UDim2.new(0, 0, 0.524663687, 0)
SelectPlot.Size = UDim2.new(0, 180, 0, 50)
SelectPlot.Font = Enum.Font.GothamBold
SelectPlot.Text = "Select Plot"
SelectPlot.TextColor3 = Color3.fromRGB(255, 255, 255)
SelectPlot.TextScaled = true
SelectPlot.TextSize = 14.000
SelectPlot.TextWrapped = true

UICorner_10.CornerRadius = UDim.new(0, 10)
UICorner_10.Parent = SelectPlot

TextLabel_6.Parent = MainSection
TextLabel_6.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_6.BackgroundTransparency = 1.000
TextLabel_6.Position = UDim2.new(0, 0, 0.748878896, 0)
TextLabel_6.Size = UDim2.new(0, 182, 0, 56)
TextLabel_6.Font = Enum.Font.GothamMedium
TextLabel_6.Text = "Right Shift to close/open UI."
TextLabel_6.TextColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_6.TextSize = 14.000
TextLabel_6.TextWrapped = true

TextLabel_7.Parent = EnclosingContainer
TextLabel_7.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel_7.BackgroundTransparency = 1.000
TextLabel_7.BorderSizePixel = 0
TextLabel_7.Size = UDim2.new(0, 366, 0, 30)
TextLabel_7.Font = Enum.Font.Gotham
TextLabel_7.Text = "RePlot v2"
TextLabel_7.TextColor3 = Color3.fromRGB(229, 229, 229)
TextLabel_7.TextScaled = true
TextLabel_7.TextSize = 14.000
TextLabel_7.TextWrapped = true

UICorner_11.Parent = EnclosingContainer

-- Scripts:

local function BPCEPTX_fake_script() -- EnclosingContainer.DragScript 
	local script = Instance.new('LocalScript', EnclosingContainer)

	local UIS = game:GetService('UserInputService')
	local frame = script.Parent
	local dragToggle = nil
	local dragSpeed = 0.1
	local dragStart = nil
	local startPos = nil
	
	local function updateInput(input)
		local delta = input.Position - dragStart
		local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
			startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		game:GetService('TweenService'):Create(frame, TweenInfo.new(dragSpeed), {Position = position}):Play()
	end
	
	frame.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
			dragToggle = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragToggle = false
				end
			end)
		end
	end)
	
	UIS.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			if dragToggle then
				updateInput(input)
			end
		end
	end)
	
end
coroutine.wrap(BPCEPTX_fake_script)()

ButtonConnect(UseMapEdge,"MakePlotOnEdge")
ButtonConnect(Autosave,"Autosave")
ButtonConnect(HidePlot,"ObscurePlot")

local function GetPlot()
    for i,v in pairs(BuildingAreas:GetChildren()) do
        if v.Name == LocalPlayer.Name .. "BuildArea" then
            return v
        end
    end
    return nil
end

local function syncRemote()
    if LocalPlayer.Character:FindFirstChild("Building Tools") then
        return LocalPlayer.Character:FindFirstChild("Building Tools").SyncAPI.ServerEndpoint
    end
    return false
end

local function CreatePart(Position,PartInstance)
    
    local Type = "Normal"

    if PartInstance.ClassName == "WedgePart" then
        Type = "Wedge"
    elseif PartInstance.ClassName == "TrussPart" then
        Type = "Truss"
    elseif PartInstance.ClassName == "CornerWedgePart" then
        Type = "Corner"
    elseif PartInstance.ClassName == "Seat" then
        Type = "Seat"
    elseif PartInstance.ClassName == "VehicleSeat" then
        Type = "VehicleSeat"
    elseif PartInstance.Shape == Enum.PartType.Cylinder then
        Type = "Cylinder"
    elseif PartInstance.Shape == Enum.PartType.Ball then
        Type = "Ball"
    end

    local args = {
        [1] = "CreatePart",
        [2] = Type,
        [3] = Position,
        [4] = GetPlot().Build
    }
    
    local Response = syncRemote():InvokeServer(unpack(args))

    return Response
end

local function ResizePart(Part,Size)
    if Part ~= nil then
    local args = {
        [1] = "SyncResize",
        [2] = {
            [1] = {
                ["Part"] = Part,
                ["CFrame"] = Part.CFrame,
                ["Size"] = Size
            }
        }
    }
    
    syncRemote():InvokeServer(unpack(args))    
    end
end

local function Decalize(Part,Decal)
    local args = {
        [1] = "CreateTextures",
        [2] = {
            [1] = {
                ["Part"] = Part,
                ["Face"] = Decal.Face,
                ["TextureType"] = "Decal"
            }
        }
    }
    
    local Response = syncRemote():InvokeServer(unpack(args))
    
    local args = {
        [1] = "SyncTexture",
        [2] = {
            [1] = {
                ["Part"] = Part,
                ["Face"] = Decal.Face,
                ["TextureType"] = "Decal",
                ["Texture"] = Decal.Texture,
                ["Transparency"] = Decal.Transparency
            }
        }
    }
    
    syncRemote():InvokeServer(unpack(args))
    
end

local function ColorPart(Part,Color)
    if Part ~= nil and Color ~= BrickColor.new("Medium stone grey").Color then
    local args = {
        [1] = "SyncColor",
        [2] = {
            [1] = {
                ["Part"] = Part,
                ["Color"] = Color,
                ["UnionColoring"] = true
            }
        }
    }
    
    syncRemote():InvokeServer(unpack(args))
    end
end

local function Meshinate(Part,Mesh)

    local args = {
        [1] = "CreateMeshes",
        [2] = {
            [1] = {
                ["Part"] = Part
            }
        }
    }
    
    local Response = false

    local Timeout = 3
    local StartTick = tick()

    repeat 
        wait() Response = syncRemote():InvokeServer(unpack(args)) 
    until Part:FindFirstChildOfClass("SpecialMesh")

    if Response then
        if Mesh.MeshType == Enum.MeshType.FileMesh then
            local args = {
                [1] = "SyncMesh",
                [2] = {
                    [1] = {
                        ["MeshType"] = Enum.MeshType.FileMesh,
                        ["Part"] = Part,
                        ["Scale"] = Mesh.Scale,
                        ["MeshId"] = Mesh.MeshId,
                        ["TextureId"] = Mesh.TextureId
                    }
                }
            }
            repeat
                wait()
                if Response then
                    syncRemote():InvokeServer(unpack(args))
                end
            until Part:FindFirstChildOfClass("SpecialMesh") and Part:FindFirstChildOfClass("SpecialMesh").MeshType == Enum.MeshType.FileMesh
        else
            local args = {
                [1] = "SyncMesh",
                [2] = {
                    [1] = {
                        ["MeshType"] = Mesh.MeshType,
                        ["Part"] = Part,
                        ["Scale"] = Mesh.Scale
                    }
                }
            }
            
            repeat
                wait()
                if Response then
                    syncRemote():InvokeServer(unpack(args))
                end
            until Part:FindFirstChildOfClass("SpecialMesh") and Part:FindFirstChildOfClass("SpecialMesh").MeshType == Mesh.MeshType
        end
    end

end

local function Lightify(Part,Light)

    local args = {
        [1] = "CreateLights",
        [2] = {
            [1] = {
                ["Part"] = Part,
                ["LightType"] = tostring(Light.ClassName)
            }
        }
    }
    
    local Response = syncRemote():InvokeServer(unpack(args))

    if Response then
        if Light.ClassName ~= "PointLight" then

            local args = {
                [1] = "SyncLighting",
                [2] = {
                    [1] = {
                        ["Part"] = Part,
                        ["LightType"] = tostring(Light.Name),
                        ["Shadows"] = Light.Shadows,
                        ["Brightness"] = Light.Brightness,
                        ["Color"] = Light.Color,
                        ["Angle"] = Light.Angle,
                        ["Face"] = Light.Face,
                        ["Range"] = Light.Range
                    }
                }
            }
            
            syncRemote():InvokeServer(unpack(args))
        else
            local args = {
                [1] = "SyncLighting",
                [2] = {
                    [1] = {
                        ["Part"] = Part,
                        ["LightType"] = tostring(Light.Name),
                        ["Shadows"] = Light.Shadows,
                        ["Brightness"] = Light.Brightness,
                        ["Color"] = Light.Color,
                        ["Range"] = Light.Range
                    }
                }
            }
            
            syncRemote():InvokeServer(unpack(args))
        end
    end

end

local function MaterializePart(Part,Material,Transparency,Reflectance)

    if not (Reflectance == 0 and Material == Enum.Material.Plastic and Transparency == 0) then

    local args = {
        [1] = "SyncMaterial",
        [2] = {
            [1] = {
                ["Part"] = Part,
                ["Material"] = Material,
                ["Transparency"] = Transparency,
                ["Reflectance"] = Reflectance
            }
        }
    }
    
    syncRemote():InvokeServer(unpack(args))
    
    end
end

local function MovePart(Part,CFrame)
    local args = {
        [1] = "SyncMove",
        [2] = {
            [1] = {
                ["Part"] = Part,
                ["CFrame"] = CFrame
            }
        }
    }
    
    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Building Tools").SyncAPI.ServerEndpoint:InvokeServer(unpack(args))
end

local function Collideify(Part,CanCollide)

    if CanCollide == false then
        local args = {
            [1] = "SyncCollision",
            [2] = {
                [1] = {
                    ["Part"] = Part,
                    ["CanCollide"] = CanCollide
                }
            }
        }
        
        syncRemote():InvokeServer(unpack(args)) 
    end
 
end

local function SendCommand(Command)
    ChatBar.Text = "!" .. Command
    for i,v in pairs(getconnections(ChatBar.FocusLost)) do
        v:Fire(true)
    end
end

local function CopyPlot(Plot,Target)

    if not GetPlot() then
        if Options.MakePlotOnEdge then
            LocalPlayer.Character:PivotTo(CFrame.new(SecretSpotTopSecret))
            wait(1)
            SendCommand("createplot")
            wait(1)
        else
            SendCommand("createplot")
            wait(1)
        end
    end

    if not syncRemote() then
        if LocalPlayer.Backpack:FindFirstChild("Building Tools") then
            LocalPlayer.Character.Humanoid:EquipTool(LocalPlayer.Backpack:FindFirstChild("Building Tools"))
        else
            SendCommand("btools")
            wait(1)
            LocalPlayer.Character.Humanoid:EquipTool(LocalPlayer.Backpack:FindFirstChild("Building Tools"))
        end
    end

    if Options.ObscurePlot then

        wait(1)

        local args = {
            [1] = "CreatePart",
            [2] = "Normal",
            [3] = CFrame.new(GetPlot().Position + Vector3.new(0,49.85,0)),
            [4] = GetPlot().Build
        }
        
        local Response = syncRemote():InvokeServer(unpack(args))

        task.wait(0.5)

        local args = {
            [1] = "SyncResize",
            [2] = {
                [1] = {
                    ["Part"] = Response,
                    ["CFrame"] = Response.CFrame,
                    ["Size"] = Vector3.new(98, 98, 98)
                }
            }
        }
        
        syncRemote():InvokeServer(unpack(args))

        LocalPlayer.Character:PivotTo(CFrame.new(SecretSpotTopSecret + Vector3.new(0,100,0)))
    end

    Notification.new("warning", "Copying plot!", "This may take a while. Please be patient.",true,5)

    local Folder = Plot:Clone()

    for _,v in pairs(Folder.Build:GetDescendants()) do
        if v:IsA("BasePart") then
            local Offset = v.CFrame.Position - Target.Position
            v.Position = GetPlot().Position + Offset
        end
        if v:IsA("Model") then
            for i,x in pairs(v:GetChildren()) do
                x.Parent = Folder.Build
            end
            v:Destroy()
        end
        if v:IsA("Folder") then
            v:Destroy()
        end
        if v:IsA("SpecialMesh") then
            v.Parent.Transparency = 0
        end
    end

    local FolderTable = Folder.Build:GetChildren()

    table.sort(FolderTable,
		function(a, b)
            if a:IsA("BasePart") and b:IsA("BasePart") then
			return a.Size.Magnitude > b.Size.Magnitude
            else
                return true
			end
		end
	)

    Building = true

    local notif = Notification.new("info", "Build progress | ETA: "..tostring((#FolderTable/MaxPartsPerSecond + #FolderTable * LocalPlayer:GetNetworkPing())), "")

    local Started = tick()

    for i,v in ipairs(FolderTable) do
        if v:IsA("BasePart") then

            task.wait()

            if not syncRemote() then
                repeat wait() until syncRemote()
            end

            if not GetPlot() then
                break
            end

            pcall(function()
                
                task.wait((1/MaxPartsPerSecond))

                local Step2 = false
                local CurrentPart = CreatePart(v.CFrame,v)
                if not CurrentPart then
                    Step2 = true
                    CreatePart(Folder.CFrame,v)
                end

                if CurrentPart then
                    Collideify(CurrentPart,v.CanCollide)
                    ResizePart(CurrentPart,v.Size)
                    if Step2 then
                        MovePart(CurrentPart,v.CFrame)                        
                    end
                    ColorPart(CurrentPart,v.Color)
                    MaterializePart(CurrentPart,v.Material,v.Transparency,v.Reflectance)

                    for _,c in pairs(v:GetChildren()) do
                        if c:IsA("SpecialMesh") then
                            Meshinate(CurrentPart,c)
                        elseif c:IsA("Light") then
                            Lightify(CurrentPart,c)
                        elseif c:IsA("Decal") then
                            Decalize(CurrentPart,c)
                        end
                    end
                end
            end)

            notif:changeBody(tostring(i).."/"..tostring(#FolderTable))
            notif:changeHeading("Build progress | ETA: " .. tostring(math.floor((#FolderTable/MaxPartsPerSecond - i/MaxPartsPerSecond))))
        end
    end

    notif:delete()

    Building = false
    Notification.new("success", "Success!", "Finished building plot ("..tostring(math.floor(tick() - Started)).." seconds)",true,5)
end

local SelectingPlot = false

local function SelectPlotFunction()
    SelectingPlot = true

    Notification.new("info", "Camera Controls", "Press Q/E to switch between plots. Enter to finish.",true,5)

    local Camera = workspace.CurrentCamera
    LocalPlayer.CameraMaxZoomDistance = 10000
    local CameraPart = Instance.new("Part")
    CameraPart.Transparency = 1
    CameraPart.Anchored = true
    CameraPart.Parent = workspace

    local Plots = {}
    local CurrentPlotsIndex = 1
    for _,v in pairs(BuildingAreas:GetChildren()) do
        table.insert(Plots,v)
    end

    Camera.CameraSubject = CameraPart

    CameraPart.Position = Plots[CurrentPlotsIndex].Position + Vector3.new(0,50,0)

    local KeyboardConnection
    KeyboardConnection = UserInputService.InputEnded:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.Q then
            CurrentPlotsIndex = CurrentPlotsIndex - 1
            if CurrentPlotsIndex == 0 then
                CurrentPlotsIndex = #Plots
            end
            CameraPart.Position = Plots[CurrentPlotsIndex].Position + Vector3.new(0,50,0)
        elseif input.KeyCode == Enum.KeyCode.E then
            CurrentPlotsIndex = CurrentPlotsIndex + 1
            if CurrentPlotsIndex > #Plots then
                CurrentPlotsIndex = 1
            end
            CameraPart.Position = Plots[CurrentPlotsIndex].Position + Vector3.new(0,50,0)
        elseif input.KeyCode == Enum.KeyCode.Return then
            KeyboardConnection:Disconnect()
            Camera.CameraType = Enum.CameraType.Custom
            Camera.CameraSubject = LocalPlayer.Character.Humanoid
            SelectingPlot = false
            LocalPlayer.CameraMaxZoomDistance = 400
            CopyPlot(Plots[CurrentPlotsIndex],Plots[CurrentPlotsIndex].CFrame)
        end
    end)
end

SelectPlot.MouseButton1Click:Connect(function()
    if not SelectingPlot and not Building then
        SelectPlotFunction()
    end
end)